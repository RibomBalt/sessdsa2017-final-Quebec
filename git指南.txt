PyCharm - git插件使用

0. 序言
git是一个强有力的版本控制工具，在多人合作中，每个人的代码可以方便地进行同步，融合，甚至版本回退。
每个人本地都有一份完整的代码，方便进行测试。同时也不会出现【我针对原来的代码debug，结果别人把代码改了】这种问题
Pycharm内置了git插件，可以脱离命令行进行操作，非常方便。如果需要学习命令行git，可以上网找资料。

1. 术语
一些常用的术语：（我只说我们会用到的）
分支（branch）：git中最重要的概念，每个分支都是一个独立的完整代码库，分支之间可以进行融合操作。远程有远程的分支（一般origin:开头），本地也可以有本地的分支。
提交（commit）：本地修改的代码进行提交。这个提交并没有提交到远程，而是在保留在本地。
拉取（pull）：从远端把代码同步到本地。注意！如果远端和本地产生了不可逆的冲突（两个人同时改同一个分支会出现这种情况），则不能pull，必须要merge
融合（merge）：把本地两个冲突的分支合并。这个是经常会出现的，下面我在工作流会再讲。
推送（push）：把本地分支推送到远程相应分支（就是把之前commit的真正推上去）如果不解决冲突（pull或者merge）就不可能成功推上去
返回（revert）：回退到之前某个分支。常见于删了大段代码，然后发现自己删错了那种

拉取请求（pull request）：这个是针对远程分支上来说的：把远程某个分支申请和另一个分支合并（这个申请不要确认了，要大家审核一遍才可以通过的）


2. 工作流程
我们采取常用的pull-merge法。这部分还是讲概念，不是具体操作
    1. 远程master分支（主要分支），每个人本地有一个master分支。这个本地master时刻和远程master保持同步（不停地pull），不要做修改
    2. 如果一个人要做修改，那么他需要在远程创建一个自己的dev分支（名字不能重复），然后同步到本地分支
    3. 以后的修改全部在dev上进行，每完成一段后commit一下，然后push。
    4. 【关键】经常切换到本地master分支，和远端master同步（比如某个同学在群里说自己的工作做完的时候），然后切回自己的本地dev，把本地dev和master合并（merge）。这很重要！（当然你也可以在最后pullrequest时候做，但是那样工作量会积累）
    5. 当你这一部分任务完成了，目标达到了，（所有代码都push到远程dev分支了），然后，登陆git网站，从你的分支向master发动pull request。然后，你的代码我们大家会看一看，如果没问题了，我会把这部分融合到远程master中（这个时候，所有人开始做第4步）
    
3. PyCharm具体操作：

注册账号：
    我们使用比较方便的国内代码托管站coding.net。大家访问https://coding.net，注册一个自己的账号，记住账号密码，然后关注一下我的账号：RibomBalt。关注之后，我把你们拉进项目，之后才能进行下一步操作。
建立项目：
    打开Pycharm，点VCS - checkout from version control - git
    窗口有三项，第一项是远程项目地址，把我给的地址（https://git.coding.net/RibomBalt/Final-Homework-SESSDSA.git）填进去，然后点后面的test按钮，应该会弹出窗口让输入账号密码，就是注册coding.net时的账号密码
    第二项是项目所在文件夹，第三项是项目在本地的名字，这个原则上随意，但建议默认。
    完成后，点clone，就会在本地创建项目，并自动打开。
    （有可能PyCharm没更新，需要用VCS-enable version control）
操作：
    和git有关的操作都在VCS下。现在把常用的列举出来：
    分支操作：
        远程分支是在coding.net网页上进行操作。打开项目主页，代码 - 分支，就可以创建或者切换分支了。创建时可以指定基准，一般都用origin/master来做基准
        本地分支可以在PyCharm上。VCS-git-branches，然后点击一个远程分支，点Checkout as a New Branch，则可以创建一个本地的分支，和远程的这个分支保持联动。如果直接创建分支的话，并不能联动，这个可能是bug，所以尽量不用其他方式创建分支（否则就得用命令行了）。切换分支可以点另一个本地分支，然后Checkout，即可直接切换。
    提交上传：
        在自己的dev分支上，写好一部分后就可以commit，方法是点击快速图标里的【VCS绿上箭头】，然后需要勾选上传哪些文件，并在Commit Message里输入你这次提交做了哪些改动（注释，别人看着也容易）。然后点击Commit and Push，之后就自动上传了（顺便也push到了你的dev远端）
        如果某一次仅仅commit了忘了push，也可以VCS-git-push来补救。
    拉取合并：
        这一点很重要，就是经常checkout到本地master分支上，和远程master同步，之后再切换回本地dev，点VCS-git-merge changes，然后Branches to Merge选本地master，这样就把master的改动合并到dev里了。
        需要注意的是，如果远端master出现改动（其他人pull request了），那么这时必然会出现冲突，你会看到，你的代码中所有和其他人不同的地方都被标出来了。这个时候，点VCS-git-resolve conflicts，会出现更清晰的窗口。中间是你最后解决的版本，两边是你先后的两个版本。改掉一处之后，点对应位置那个叉号，表示解决了这里的冲突。所有冲突解决完毕，点击Apply，就解决好冲突了。这时再进行一次commit and push，就可以了
    回退：
        这个我自己也不是很清楚，因为用的不多，在VCS-git-revert，可以把自己当前状态回退到之前某一次commit的状态。好像远端也可以操作吧。我就不研究了。
        
    Pull Request（coding.net习惯叫Merge Request，一个东西）：
        当你这个分支完成之后（比如已经实现了某个特定的功能），你就可以把你的远程分支融合到主分支上了。这个操作是在coding.net网站上的。打开项目主页，代码-分支，点你自己的分支上的【新建合并请求】，然后目标分支选master。下面的文本就说一说你自己这个分支的功能介绍什么的，方便审核。提交好之后，不要手快直接点合并……一般来讲冲突都是解决好的，不过最好还是大家看一下。pull requests自带评论区，可以在网络上评论什么的……确定没问题后，点一下那里的“合并”，就真的把这个分支合并进去了。我不会删除这个分支，但是建议大家看到我合并之后自动把自己的远端分支删掉，然后开新的。如果我觉得不合适的话，就会拒绝这个合并请求，并且告诉你怎么改……然后你改好了，再交pull requests就好了。
        
3. 结语
    
    就这么多，git还是好用的，一共就是四步。功能的位置也比较好记，基本都在VCS下面
    为了方便记忆，大家可以想象一下交作业的过程：大家在自己的本上写作业，这叫commit；把别人的本拿过来看，这叫pull；对着别人的本改自己的作业，这叫merge，把自己的本交上去，这叫pull request。
    为了熟悉操作，可以这两天随意给我发几个pull request，在正式开始项目的时候我会都删掉的，嗯，就这样吧
    如果有问题随时问我